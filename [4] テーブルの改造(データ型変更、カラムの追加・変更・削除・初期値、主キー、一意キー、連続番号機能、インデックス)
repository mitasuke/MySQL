カラムのデータ型を変更する。
mysql> alter table テーブル名 modify カラム名 データ型;

例：
mysql> alter table tb1c modify nama varchar(100);

mysql> desc tb1c;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| bang  | varchar(10)  | YES  |     | NULL    |       |
| nama  | varchar(100) | YES  |     | NULL    |       |　★100 になっている
| tosi  | int(11)      | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+

★カラムにデータが既に存在する場合、データ型の変更はしない方が良い。


テーブルにカラムを追加する。
mysql> alter table テーブル名 add カラム名 データ型;

例：
mysql> alter table tb1c add umare datetime;

mysql> desc tb1c;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| bang  | varchar(10)  | YES  |     | NULL    |       |
| nama  | varchar(100) | YES  |     | NULL    |       |
| tosi  | int(11)      | YES  |     | NULL    |       |
| umare | datetime     | YES  |     | NULL    |       |　★datetime型のカラムumareが追加された
+-------+--------------+------+-----+---------+-------+


テーブルの先頭にカラムを追加する。（デフォルトでは最後にカラムが追加される）
mysql> alter table テーブル名 add カラム名 データ型 first;

例：
mysql> alter table tb1d add umare datetime first;

mysql> desc tb1d;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| umare | datetime    | YES  |     | NULL    |       |　★テーブルの先頭にカラムumareが追加された
| bang  | varchar(10) | YES  |     | NULL    |       |
| nama  | varchar(10) | YES  |     | NULL    |       |
| tosi  | int(11)     | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+


カラムを好きな位置に追加する。
mysql> alter table テーブル名 add 追加するカラム名 データ型 after 追加するカラムの前の列のカラム名;

例：
mysql> alter table tb1e add umare datetime after bang;

mysql> desc tb1e;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| bang  | varchar(10) | YES  |     | NULL    |       |
| umare | datetime    | YES  |     | NULL    |       |　★カラムbangの後ろにカラムumareが追加された
| nama  | varchar(10) | YES  |     | NULL    |       |
| tosi  | int(11)     | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+


カラムの並び順を変更する。
mysql> alter table tb1c modify umare datetime first;

mysql> desc tb1c;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| umare | datetime     | YES  |     | NULL    |       |　★カラムumareが、先頭に移動した
| bang  | varchar(10)  | YES  |     | NULL    |       |
| nama  | varchar(100) | YES  |     | NULL    |       |
| tosi  | int(11)      | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+


カラム名とカラムのデータ型を同時に変更する。
mysql> alter table テーブル名 change 変更前のカラム名 変更後のカラム名 変更後のデータ型;

例：
mysql> alter table tb1c change umare seinen date;

mysql> desc tb1c;
+--------+--------------+------+-----+---------+-------+
| Field  | Type         | Null | Key | Default | Extra |
+--------+--------------+------+-----+---------+-------+
| seinen | date         | YES  |     | NULL    |       |　★このカラムの名前とデータ型が変わった
| bang   | varchar(10)  | YES  |     | NULL    |       |
| nama   | varchar(100) | YES  |     | NULL    |       |
| tosi   | int(11)      | YES  |     | NULL    |       |
+--------+--------------+------+-----+---------+-------+


テーブルからカラムを削除する。
mysql> alter table テーブル名 drop 削除するカラム名;

例：
mysql> alter table tb1c drop seinen;

mysql> desc tb1c;
+-------+--------------+------+-----+---------+-------+
| Field | Type         | Null | Key | Default | Extra |
+-------+--------------+------+-----+---------+-------+
| bang  | varchar(10)  | YES  |     | NULL    |       |　★さっきまで存在したカラムseinenが消えた
| nama  | varchar(100) | YES  |     | NULL    |       |
| tosi  | int(11)      | YES  |     | NULL    |       |
+-------+--------------+------+-----+---------+-------+


主キー（PRIMARY KEY）を持つテーブルを作成する。
mysql> create table テーブル名(カラム名 データ型 primary key,カラム名 データ型,･･････);

例：
mysql> create table itii(a int primary key,b varchar(10));

mysql> desc itii;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| a     | int(11)     | NO   | PRI | NULL    |       |　★Keyが「PRI」になっていて、Nullが許可されない(NO)になっている。
| b     | varchar(10) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

★上記の場合、主キーになったカラムaについては、重複する値は挿入できず、値が無い状態(Null)も許されない。
　重複した値を入力しようとしたり、意図的にNullを入力しようとするとエラーになる。
★主キーによって、一意にレコードを特定することができるようになる。


一意キー（UNIQUE KEY）を持つテーブルを作成する。
mysql> create table テーブル名(カラム名 データ型 unique,カラム名 データ型,･･････);

例：
mysql> create table uniq(a int unique,b varchar(10));

mysql> desc uniq;
+-------+-------------+------+-----+---------+-------+
| Field | Type        | Null | Key | Default | Extra |
+-------+-------------+------+-----+---------+-------+
| a     | int(11)     | YES  | UNI | NULL    |       |　★Keyが「UNI」になっているが、Nullは許可する(YES)になっている
| b     | varchar(10) | YES  |     | NULL    |       |
+-------+-------------+------+-----+---------+-------+

★上記の場合、一意キーになったカラムaについては、重複する値を挿入することはできないが、Nullは許す状態になっている。


連続番号機能付きカラムを持つテーブルを作成する。
mysql> create table テーブル名(カラム名 データ型 auto_increment primary key,カラム名 データ型,･･････);

★連続番号機能付きカラムのデータ型はINTなどの整数型にする必要がある。

例：
mysql> create table renzoku(a int auto_increment primary key,b varchar(10));

mysql> desc renzoku;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| a     | int(11)     | NO   | PRI | NULL    | auto_increment |　★連続番号機能が設定されている
| b     | varchar(10) | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+

上記のテーブルのカラムbにだけ値を挿入すれば、カラムaには自動で連番が振られる。

mysql> insert into renzoku(b) values('子');
mysql> insert into renzoku(b) values('丑');
mysql> insert into renzoku(b) values('寅');
mysql> select * from renzoku;
+---+------+
| a | b    |
+---+------+
| 1 | 子   |
| 2 | 丑   |
| 3 | 寅   |
+---+------+

自分の好きな値から連番を振ることもできる。
mysql> insert into renzoku values(100,'てすと');

上記のようにすれば、カラムaに100が挿入され、次のデータからは101,102,･･･と採番されるようになる。

テーブルにある全レコードを削除して新たにデータを挿入した場合、番号は続きから振られる。
mysql> delete from renzoku;　　★テーブルrenzokuの全レコードを削除
mysql> select * from renzoku;
Empty set (0.00 sec)
mysql> insert into renzoku(b) values('test');
mysql> select * from renzoku;
+---+------+
| a | b    |
+---+------+
| 4 | test |　　★連続番号が 4 から振られている
+---+------+

こんな時に連続番号を1から振りたい場合、AUTO_INCREMENT を初期化する必要がある。
mysql> alter table テーブル名 auto_increment=1;


カラムの初期値を設定したテーブルを作成する。
mysql> create table テーブル名(カラム名 データ型 default カラムの初期値,･･････);

例：
mysql> create table tb1g(bang varchar(10),nama varchar(10) default '氏名未入力',tosi int);

mysql> desc tb1g;
+-------+-------------+------+-----+-----------------+-------+
| Field | Type        | Null | Key | Default         | Extra |
+-------+-------------+------+-----+-----------------+-------+
| bang  | varchar(10) | YES  |     | NULL            |       |
| nama  | varchar(10) | YES  |     | 氏名未入力      |       |　★Default(初期値)が、NULLではなく「氏名未入力」になっている。
| tosi  | int(11)     | YES  |     | NULL            |       |
+-------+-------------+------+-----+-----------------+-------+

試しにbangとtosiの部分にだけデータを挿入すると、namaの部分には「氏名未入力」と挿入される。
mysql> insert into tb1g(bang,tosi) values('N999',38);
mysql> select * from tb1g;
+------+-----------------+------+
| bang | nama            | tosi |
+------+-----------------+------+
| N999 | 氏名未入力      |   38 |
+------+-----------------+------+

既に存在するテーブルに対してカラムの初期値を設定する場合は ALTER TABLE ～ MODIFY文 を使用する。
mysql> alter table tb1g modify nama varchar(10) default '氏名未入力';


インデックスを作成する。
mysql> create index インデックス名 on テーブル名(カラム名);

例：
mysql> create index my_ind on tb1g(bang);

★カラムに値の重複が多い場合、インデックスを作成しない方が良い。
★インデックスが設定されているテーブルを更新すると、インデックスの情報を再度作り直す処理が発生する。
　よって、インデックスが存在すると、検索は早くなる可能性があるが、更新が遅くなる可能性もある。


インデックスを表示する。
mysql> show index from テーブル名;

例：
mysql> show index from tb1g \G　　★最後を ; でなく \G にすると、カラム毎の表示になって見やすい。（; にするともう読めない）
*************************** 1. row ***************************
        Table: tb1g
   Non_unique: 1
     Key_name: my_ind
 Seq_in_index: 1
  Column_name: bang
    Collation: A
  Cardinality: 1
     Sub_part: NULL
       Packed: NULL
         Null: YES
   Index_type: BTREE
      Comment:
Index_comment:

★主キーを設定した場合は、自動的にインデックスも作成されている。


インデックスを削除する。
mysql> drop index インデックス名 on テーブル名;

例：
mysql> drop index my_ind on tb1g;

mysql> show index from tb1g \G
Empty set (0.00 sec)

★主キーからはインデックスは消せないっぽい？


★テーブルにロックをかけることができる。
LOCK TABLES テーブル名 ロックの種類;

ロックの種類は以下の通り。
READ・・・SELECT以外は誰であってもできなくなる。
READ LOCAL・・・ロックをかけたユーザだけSELECT以外はできなくなる。 ストレージエンジンがInnoDBの場合は、READと同じになる。
WRITE・・・ロックをかけたユーザ以外は全ての操作ができない。 ロックをかけたユーザ自身は全ての操作ができる。

例：
mysql> lock tables tb1 read;
mysql> lock tables tb1 write;


★全てのテーブルのロックを解除する。
UNLOCK TABLES;

